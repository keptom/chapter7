{'TMP': 'C:\\Users\\bob\\AppData\\Local\\Temp', 'COMPUTERNAME': 'KINGJAJA-PC', 'VS140COMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\Tools\\', 'USERDOMAIN': 'kingjaja-PC', 'PSMODULEPATH': 'C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 58 Stepping 9, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files (x86)', 'PROCESSOR_REVISION': '3a09', 'SYSTEMROOT': 'C:\\Windows', 'PATH': 'C:\\Python27\\;C:\\Python27\\Scripts;C:\\Program Files (x86)\\Google\\Chrome\\Application;C:\\Program Files (x86)\\Wondershare\\Wondershare dr.fone toolkit for Android\\ToolKit;C:\\Program Files (x86)\\Wondershare\\Wondershare dr.fone toolkit for Android\\Library\\CBS;C:\\Program Files (x86)\\Common Files\\Intel\\Shared Files\\cpp\\bin\\Intel64;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Brackets\\command;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\Gow\\bin;C:\\ProgramData\\chocolatey\\bin;C:\\cygwin64\\bin\\;C:\\Qt\\5.8\\msvc2015_64\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\OpenVPN\\bin;C:\\Program Files (x86)\\HMA! Pro VPN\\bin;C:\\Program Files (x86)\\Microsoft VS Code\\bin;C:\\tools\\mingw64\\bin;C:\\Program Files (x86)\\Bitvise SSH Client;C:\\Program Files\\Java\\jdk1.8.0_101\\bin;C:\\Program Files\\Java\\jre1.8.0_101\\bin;C:\\adb;C:\\Program Files (x86)\\QuickTime\\QTSystem\\;C:\\Program Files (x86)\\Skype\\Phone\\;C:\\Python27\\lib\\site-packages\\pywin32_system32', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'C_EM64T_REDIST11': 'C:\\Program Files (x86)\\Common Files\\Intel\\Shared Files\\cpp\\', 'TEMP': 'C:\\Users\\bob\\AppData\\Local\\Temp', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'x86', 'CHOCOLATEYINSTALL': 'C:\\ProgramData\\chocolatey', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'USERPROFILE': 'C:\\Users\\bob', 'LOCALAPPDATA': 'C:\\Users\\bob\\AppData\\Local', 'HOMEPATH': '\\Users\\bob', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'bob', 'LOGONSERVER': '\\\\KINGJAJA-PC', 'PROMPT': '$P$G', 'SESSIONNAME': 'Console', 'PROGRAMDATA': 'C:\\ProgramData', 'CLASSPATH': '.;C:\\Program Files (x86)\\QuickTime\\QTSystem\\QTJava.zip', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'ASL.LOG': 'Destination=file', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\Windows', 'APPDATA': 'C:\\Users\\bob\\AppData\\Roaming', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'NUMBER_OF_PROCESSORS': '2', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_ARCHITEW6432': 'AMD64', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'QTJAVA': 'C:\\Program Files (x86)\\QuickTime\\QTSystem\\QTJava.zip'}